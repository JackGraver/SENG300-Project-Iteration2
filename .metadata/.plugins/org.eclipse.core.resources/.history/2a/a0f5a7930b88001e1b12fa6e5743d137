package com.thelocalmarketplace.software.test;
import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Currency;
import java.util.List;

import org.junit.Before;
import org.junit.Test;
import org.junit.rules.ExpectedException;

import com.tdc.CashOverloadException;
import com.tdc.coin.Coin;
import com.tdc.coin.CoinDispenserBronze;
import com.tdc.coin.CoinDispenserGold;
import com.tdc.coin.CoinSlot;
import com.tdc.coin.CoinValidator;
import com.thelocalmarketplace.hardware.SelfCheckoutStationBronze;
import com.thelocalmarketplace.hardware.SelfCheckoutStationGold;
import com.thelocalmarketplace.hardware.SelfCheckoutStationSilver;
import com.thelocalmarketplace.software.addItem.PaymentCoinController;

import ca.ucalgary.seng300.simulation.SimulationException;
import powerutility.PowerGrid;
//Michael Svoboda (30039040)
//Shenuk Perera (30086618)
//Marvellous Chukwukelu (30197270)
//Kyuyop Andrew Park(10046592)
//Darpal Patel (30088795)
public class PayCoinTest {
	
	public SelfCheckoutStationGold selfCheckoutStationGold;
	public SelfCheckoutStationBronze selfCheckoutStationBronze;
	public SelfCheckoutStationSilver selfCheckoutStationSilver;
	public CoinDispenserBronze coinDispenserBronze;
	public CoinDispenserGold coinDispenserGold;
	public CoinSlot coinSlot;
	public PaymentCoinController paymentCoinController;
	public PowerGrid powerGrid;
	public Coin coin;
	public BigDecimal amountDue;
	public CoinValidator coinValidator;
	public Currency cad; 
	public List<BigDecimal> coinDenomination;
	
	
	
	
	@Before
	public void Setup() {
		powerGrid = PowerGrid.instance();
		PowerGrid.engageUninterruptiblePowerSource();//makes it so powergrid always works
		BigDecimal[] banknoteDenominationsConfiguration = {new BigDecimal("5"),
	            new BigDecimal("10"), new BigDecimal("20"),
	            new BigDecimal("50"),new BigDecimal("100")};
	    BigDecimal[] coinDenominationsConfigurationArray = {new BigDecimal("2"),
	            new BigDecimal("1"), new BigDecimal("0.25"),
	            new BigDecimal("0.1"),new BigDecimal("0.05")}; 
	    cad = Currency.getInstance("CAD");
	    
		SelfCheckoutStationGold.resetConfigurationToDefaults();
        SelfCheckoutStationGold.configureCurrency(Currency.getInstance("CAD"));
        SelfCheckoutStationGold.configureBanknoteStorageUnitCapacity(7);
        SelfCheckoutStationGold.configureCoinDenominations(coinDenominationsConfigurationArray);
        SelfCheckoutStationGold.configureCoinDispenserCapacity(5);
        SelfCheckoutStationGold.configureCoinTrayCapacity(5);
        SelfCheckoutStationGold.configureScaleMaximumWeight(5);
        SelfCheckoutStationGold.configureReusableBagDispenserCapacity(6);
        SelfCheckoutStationGold.configureScaleSensitivity(9);
		selfCheckoutStationGold = new SelfCheckoutStationGold();
		selfCheckoutStationGold.plugIn(powerGrid);
		selfCheckoutStationGold.turnOn();
		
		
		SelfCheckoutStationSilver.configureCurrency(Currency.getInstance("CAD"));
	    SelfCheckoutStationSilver.configureBanknoteDenominations(banknoteDenominationsConfiguration);
	    SelfCheckoutStationSilver.configureBanknoteStorageUnitCapacity(7);
	    SelfCheckoutStationSilver.configureCoinDenominations(coinDenominationsConfigurationArray);
	    SelfCheckoutStationSilver.configureCoinDispenserCapacity(5);
	    SelfCheckoutStationSilver.configureCoinTrayCapacity(5);
	    SelfCheckoutStationSilver.configureScaleMaximumWeight(5);
	    SelfCheckoutStationSilver.configureReusableBagDispenserCapacity(6);
	    SelfCheckoutStationSilver.configureScaleSensitivity(9);
	    SelfCheckoutStationSilver.configureCoinStorageUnitCapacity(5);	
		selfCheckoutStationSilver = new SelfCheckoutStationSilver();
		selfCheckoutStationSilver.plugIn(powerGrid);
		selfCheckoutStationSilver.turnOn();
		
		SelfCheckoutStationBronze.configureCurrency(Currency.getInstance("CAD"));
	    SelfCheckoutStationBronze.configureBanknoteDenominations(banknoteDenominationsConfiguration);
	    SelfCheckoutStationBronze.configureBanknoteStorageUnitCapacity(7);
	    SelfCheckoutStationBronze.configureCoinDenominations(coinDenominationsConfigurationArray);
	    SelfCheckoutStationBronze.configureCoinDispenserCapacity(5);
	    SelfCheckoutStationBronze.configureCoinTrayCapacity(5);
	    SelfCheckoutStationBronze.configureScaleMaximumWeight(5);
	    SelfCheckoutStationBronze.configureReusableBagDispenserCapacity(6);
	    SelfCheckoutStationBronze.configureScaleSensitivity(9);
	    SelfCheckoutStationBronze.configureCoinStorageUnitCapacity(5);
		selfCheckoutStationBronze = new SelfCheckoutStationBronze();
		selfCheckoutStationBronze.plugIn(powerGrid);
		selfCheckoutStationBronze.turnOn();

		coinDispenserGold = new CoinDispenserGold(5);
		coinDispenserBronze = new CoinDispenserBronze(5);
		coinDispenserGold.connect(powerGrid);
		

		coinDenomination = new ArrayList<>();
		coinDenomination.add(new BigDecimal("0.25"));// could add more
		coinValidator = new CoinValidator(cad, coinDenomination);	
	}
	 	
	@Test
	public void PaymentNotCompleteGold() throws SimulationException, CashOverloadException {
		amountDue = new BigDecimal("0.75");
		BigDecimal quarter = new BigDecimal("0.25");
		coin = new Coin(cad, quarter);// 0.25 coin used for everything here
		
		//loading the dispenser with coins for it to dispense to customer the change
		coinDispenserGold.load(coin);// adds 0.25
		coinDispenserGold.load(coin);// adds 0.25
		
		
		paymentCoinController = new PaymentCoinController(selfCheckoutStationGold, coinDispenserGold, coinDispenserBronze);
		
		paymentCoinController.setAmountDue(amountDue);//tell the paymentCoinController that 0.75 amount is needed to pay
		
		//customer starts putting in coins to pay
		paymentCoinController.validCoinDetected(coinValidator, coin.getValue());//0.25 is not removed from 0.75. thus, 0.50 is amount due
		paymentCoinController.validCoinDetected(coinValidator, coin.getValue());//0.25 is not removed from 0.50. thus, 0.25 is amount due
		
		//since we didnt do it again. this means the customer has not paid. there for the amount due is 0.25
		assertTrue(new BigDecimal("0.25").compareTo(paymentCoinController.getAmount()) == 0);//the result should be 0.25. thus when comparing 0.25 to 0.25, it should be 0
	}
	
	
	
//	
//	@Test
//	public void PaymentComplete() {
//		amountDue = new BigDecimal("0.75");
//		BigDecimal quarter = new BigDecimal("0.25");
//		coin = new Coin(cad, quarter);
//		paymentCoinController = new PaymentCoinController(selfCheckoutStationGold);
//		paymentCoinController.validCoinDetected(coinValidator, coin.getValue());
//		paymentCoinController.validCoinDetected(coinValidator, coin.getValue());
//		paymentCoinController.validCoinDetected(coinValidator, coin.getValue());
//		paymentCoinController.validCoinDetected(coinValidator, coin.getValue());
//		BigDecimal expectedPayment = new BigDecimal("-0.25");
//		assertEquals(0, paymentCoinController.getAmount().compareTo(expectedPayment));
//	}
//	
//	
//	@Test
//	public void weightDiscrepancyDetectedPay() {
//		amountDue = new BigDecimal("0.75");
//		BigDecimal initalAmountDue = new BigDecimal("0.75");
//		BigDecimal quarter = new BigDecimal("0.25");
//		coin = new Coin(cad, quarter);
//		paymentCoinController = new PaymentCoinController(selfCheckoutStationGold);
//		paymentCoinController.updateWeightDiscrepancy(12, 1);
//		paymentCoinController.validCoinDetected(coinValidator, coin.getValue());
//		paymentCoinController.validCoinDetected(coinValidator, coin.getValue());
//		assertTrue(initalAmountDue.compareTo(paymentCoinController.getAmount()) == 0); //when comparing intial amount due to the amount after inserting coins,the difference should be 0. because cop
//		//since there is a weight discrepancy. you should not be able to pay
//	}
//	
//	@Test
//	public void NoWeightDiscrepancyDetectedPay() {
//		amountDue = new BigDecimal("0.75");
//		BigDecimal quarter = new BigDecimal("0.25");
//		coin = new Coin(cad, quarter);
//		paymentCoinController = new PaymentCoinController(selfCheckoutStationGold);
//		paymentCoinController.updateWeightDiscrepancy(12, 12);
//		paymentCoinController.validCoinDetected(coinValidator, coin.getValue());
//		paymentCoinController.validCoinDetected(coinValidator, coin.getValue());
//		BigDecimal expectedPayment = new BigDecimal("0.25");
//		assertTrue(expectedPayment.compareTo(paymentCoinController.getAmount()) == 0); //when comparing expectedamountdue to the amount after inserting coins,the difference should be 0. because cop
//		//since there is a weight discrepancy. you should not be able to pay
//	}
}
