package com.thelocalmarketplace.software.addItem;


import java.math.BigDecimal;

import com.tdc.AbstractComponent;
import com.tdc.CashOverloadException;
import com.tdc.DisabledException;
import com.tdc.IComponent;
import com.tdc.IComponentObserver;
import com.tdc.NoCashAvailableException;
import com.tdc.Sink;
import com.tdc.coin.AbstractCoinDispenser;
import com.tdc.coin.Coin;
import com.tdc.coin.CoinDispenserBronze;
import com.tdc.coin.CoinDispenserGold;
import com.tdc.coin.CoinDispenserObserver;
import com.tdc.coin.CoinSlot;
import com.tdc.coin.CoinSlotObserver;
import com.tdc.coin.CoinStorageUnit;
import com.tdc.coin.CoinValidator;
import com.tdc.coin.CoinValidatorObserver;
import com.tdc.coin.ICoinDispenser;
import com.thelocalmarketplace.hardware.AbstractSelfCheckoutStation;
import com.thelocalmarketplace.hardware.CoinTray;
import com.thelocalmarketplace.hardware.SelfCheckoutStationBronze;
import com.thelocalmarketplace.hardware.SelfCheckoutStationGold;
import com.thelocalmarketplace.hardware.SelfCheckoutStationSilver;

import powerutility.PowerGrid;
//Michael Svoboda (30039040)
//Shenuk Perera (30086618)
//Marvellous Chukwukelu (30197270)
//Kyuyop Andrew Park(10046592)
//Darpal Patel (30088795)


/**
 * Controls the logic of coin insertion. Tracks amount due on bill as coins are inserted
 * during the current transaction.
 */
public class PaymentCoinController implements CoinSlotObserver, CoinValidatorObserver, CoinDispenserObserver {
	
	public SelfCheckoutStationGold selfCheckoutStationGold;
	public SelfCheckoutStationBronze selfCheckoutStationBronze;
	public SelfCheckoutStationSilver selfCheckoutStationSilver;
	public CoinDispenserBronze coinDispenserBronze;
	public CoinDispenserGold coinDispenserGold;
	public CoinSlot coinSlot;
	
    private AbstractSelfCheckoutStation selfCheckoutStation;
    private PowerGrid powerGrid;
    private Coin coin;
    private BigDecimal amountDue;
    
    private BigDecimal dispenserAmountNeed;
    
    public boolean empty = false;
    private boolean weightDiscrepancyDetected = false; //keep track of weight discrepancy 
	private boolean attendentComes = false;
	


    
    public PaymentCoinController (SelfCheckoutStationGold scg, CoinDispenserGold cdg,CoinDispenserBronze cdb ) {
		this.selfCheckoutStationGold = scg;
		selfCheckoutStationGold.coinValidator.attach(this);
		cdg.attach(this);
		cdb.attach(this);
	}
	
	public PaymentCoinController (SelfCheckoutStationSilver scs, CoinDispenserGold cdg,CoinDispenserBronze cdb ) {
		this.selfCheckoutStationSilver = scs;
		selfCheckoutStationSilver.coinValidator.attach(this);
		cdg.attach(this);
		cdb.attach(this);
		
	}
	
	public PaymentCoinController (SelfCheckoutStationBronze scb, CoinDispenserGold cdg,CoinDispenserBronze cdb ){
		this.selfCheckoutStationBronze = scb;
		selfCheckoutStationBronze.coinValidator.attach(this);
		cdg.attach(this);
		cdb.attach(this);
	}
	
	/**
	 * set the amount due
	 * @param amount 
	 */
	public void setAmountDue(BigDecimal amount) {
		amountDue = amount; 
	}

    /**
     * Signals to the customer the updated amount due after coin insertion.
     * 
     * @param amountDue The amount due to be displayed to the customer.
     */
    public void updateCustomer(BigDecimal amountDue) {
        System.out.println("The amount due: " + amountDue);
    }

    /**
     * @return the total value of the remaining amount due on the bill.
     */
    public BigDecimal getAmount() {
        return amountDue;
    }
    
    public BigDecimal getDispenserAmountNeeded() {
        return dispenserAmountNeed;
    }

    /**
     * Receipt customer receives. Not fully implemented yet.
     */
    public void printReceipt() {
        System.out.println("Transaction Complete");
    }
    
   
    
    
    /**
     * Evaluting the weight discrepancy 
     */
    public boolean CheckForWeightDiscrepancy(double expectedWeight, double actualWeight) {
		if (expectedWeight != actualWeight) {
			return true; // a weight discrepancy has been detected
		} else {
			return false; // a weight discrepancy has not been detected
		}
	}
    
    public void updateWeightDiscrepancy(double expectedWeight, double actualWeight) {
    	weightDiscrepancyDetected = CheckForWeightDiscrepancy(expectedWeight,actualWeight);

    }

 

    @Override
    public void coinInserted(CoinSlot slot) {
        // Ignore for now, later iteration?
    }

    @Override
    public void validCoinDetected(CoinValidator validator, BigDecimal value) {
    	//we assume its a valid coin everytime this function is called. thus, no need to valid coin check
    	if (weightDiscrepancyDetected == false) {
    		amountDue = amountDue.subtract(value);
    		
            if (amountDue.compareTo(BigDecimal.ZERO) == 0) {
                printReceipt();
            }
            else if(amountDue.compareTo(BigDecimal.ZERO) < 0) {
            	
            	dispenserAmountNeed = amountDue.abs();
            	
            	
                printReceipt();

            }
           
            else {
                updateCustomer(amountDue);
            }
    	} else {
            System.out.println("SYSTEM BLOCKED");

    	}

        
    }
    
    

    @Override
    public void invalidCoinDetected(CoinValidator validator) {
        // Rejection of coin, to be implemented in a later iteration?
    }



	@Override
	public void coinsFull(ICoinDispenser dispenser) {
		// TODO Auto-generated method stub
		
	}



	@Override
	public void coinsEmpty(ICoinDispenser dispenser) {
		empty = true;
		
	}



	@Override
	public void coinAdded(ICoinDispenser dispenser, Coin coin) {
		System.out.println("UH OH");
		
	}



	
	/**
     * where the coins that are considered change will be unloaded
     * should be dispenserAmount
     * the dispenser has only one denomination of a coin. which I can choose.
     * 	thus the coin param is for the coin i am choosing to dispense
     */
	public void dispenseTrayCoin(CoinTray coinTray, Coin coin) {
		
				if(dispenserAmountNeed.compareTo(BigDecimal.ZERO) != 0) {
					try {
						coinTray.receive(coin);
					} catch (CashOverloadException | DisabledException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					dispenserAmountNeed = dispenserAmountNeed.subtract(coin.getValue());
				}
					
		
				
	}
	
	public void dispenseCoin(ICoinDispenser dispenser, Coin coin) {
		try {

				dispenser.emit();
				dispenserAmountNeed = dispenserAmountNeed.subtract(coin.getValue());

					
				} catch (CashOverloadException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (NoCashAvailableException e) {
					attendentComes  = true;
					System.out.println("They require "+dispenserAmountNeed+" in change");
					e.printStackTrace();
				} catch (DisabledException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
	}
	
	
	@Override
	public void coinRemoved(ICoinDispenser dispenser, Coin coin) {
		
	}



	@Override
	public void coinsLoaded(ICoinDispenser dispenser, Coin... coins) {
		// TODO Auto-generated method stub
		
	}


	
	@Override
	public void coinsUnloaded(ICoinDispenser dispenser, Coin... coins) {
		
		
	}



	@Override
	public void enabled(IComponent<? extends IComponentObserver> component) {
		// TODO Auto-generated method stub
		
	}



	@Override
	public void disabled(IComponent<? extends IComponentObserver> component) {
		// TODO Auto-generated method stub
		
	}



	@Override
	public void turnedOn(IComponent<? extends IComponentObserver> component) {
		// TODO Auto-generated method stub
		
	}



	@Override
	public void turnedOff(IComponent<? extends IComponentObserver> component) {
		// TODO Auto-generated method stub
		
	}
}
