package com.thelocalmarketplace.software.test;
import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Currency;
import java.util.List;

import org.junit.Before;
import org.junit.Test;
import org.junit.rules.ExpectedException;

import com.tdc.coin.Coin;
import com.tdc.coin.CoinDispenserBronze;
import com.tdc.coin.CoinDispenserGold;
import com.tdc.coin.CoinSlot;
import com.tdc.coin.CoinValidator;
import com.thelocalmarketplace.hardware.SelfCheckoutStationBronze;
import com.thelocalmarketplace.hardware.SelfCheckoutStationGold;
import com.thelocalmarketplace.hardware.SelfCheckoutStationSilver;
import com.thelocalmarketplace.software.addItem.PaymentCoinController;

import powerutility.PowerGrid;
//Michael Svoboda (30039040)
//Shenuk Perera (30086618)
//Marvellous Chukwukelu (30197270)
//Kyuyop Andrew Park(10046592)
//Darpal Patel (30088795)
public class PayCoinTest {
	
	public SelfCheckoutStationGold selfCheckoutStationGold;
	public SelfCheckoutStationBronze selfCheckoutStationBronze;
	public SelfCheckoutStationSilver selfCheckoutStationSilver;
	public CoinDispenserBronze coinDispenserBronze;
	public CoinDispenserGold coinDispenserGold;
	public CoinSlot coinSlot;
	public PaymentCoinController paymentCoinController;
	public PowerGrid powerGrid;
	public Coin coin;
	public BigDecimal amountDue;
	public CoinValidator coinValidator;
	public Currency cad; 
	public List<BigDecimal> coinDenomination;
	
	
	
	
	@Before
	public void Setup() {
		selfCheckoutStationGold = new SelfCheckoutStationGold();
		selfCheckoutStationSilver = new SelfCheckoutStationSilver();
		selfCheckoutStationBronze = new SelfCheckoutStationBronze();

		powerGrid = PowerGrid.instance();
		PowerGrid.engageUninterruptiblePowerSource();//makes it so powergrid always works
		cad = Currency.getInstance("CAD");
		coinDenomination = new ArrayList<>();
		coinDenomination.add(new BigDecimal("0.25"));// could add more
		coinValidator = new CoinValidator(cad, coinDenomination);	
	}
	
	
//	@Test
//	public void PaymentNotCompleteGold() {
//		amountDue = new BigDecimal("0.75");
//		BigDecimal quarter = new BigDecimal("0.25");
//		coin = new Coin(cad, quarter);
//		paymentCoinController = new PaymentCoinController(selfCheckoutStationGold);
//		paymentCoinController.validCoinDetected(coinValidator, coin.getValue());
//		paymentCoinController.validCoinDetected(coinValidator, coin.getValue());
//		assertTrue(new BigDecimal("0.25").compareTo(paymentCoinController.getAmount()) == 0);//the result should be 0.25. thus when comparing 0.25 to 0.25, it should be 0
//	}
//	
//	@Test
//	public void PaymentComplete() {
//		amountDue = new BigDecimal("0.75");
//		BigDecimal quarter = new BigDecimal("0.25");
//		coin = new Coin(cad, quarter);
//		paymentCoinController = new PaymentCoinController(selfCheckoutStationGold);
//		paymentCoinController.validCoinDetected(coinValidator, coin.getValue());
//		paymentCoinController.validCoinDetected(coinValidator, coin.getValue());
//		paymentCoinController.validCoinDetected(coinValidator, coin.getValue());
//		paymentCoinController.validCoinDetected(coinValidator, coin.getValue());
//		BigDecimal expectedPayment = new BigDecimal("-0.25");
//		assertEquals(0, paymentCoinController.getAmount().compareTo(expectedPayment));
//	}
//	
//	
//	@Test
//	public void weightDiscrepancyDetectedPay() {
//		amountDue = new BigDecimal("0.75");
//		BigDecimal initalAmountDue = new BigDecimal("0.75");
//		BigDecimal quarter = new BigDecimal("0.25");
//		coin = new Coin(cad, quarter);
//		paymentCoinController = new PaymentCoinController(selfCheckoutStationGold);
//		paymentCoinController.updateWeightDiscrepancy(12, 1);
//		paymentCoinController.validCoinDetected(coinValidator, coin.getValue());
//		paymentCoinController.validCoinDetected(coinValidator, coin.getValue());
//		assertTrue(initalAmountDue.compareTo(paymentCoinController.getAmount()) == 0); //when comparing intial amount due to the amount after inserting coins,the difference should be 0. because cop
//		//since there is a weight discrepancy. you should not be able to pay
//	}
//	
//	@Test
//	public void NoWeightDiscrepancyDetectedPay() {
//		amountDue = new BigDecimal("0.75");
//		BigDecimal quarter = new BigDecimal("0.25");
//		coin = new Coin(cad, quarter);
//		paymentCoinController = new PaymentCoinController(selfCheckoutStationGold);
//		paymentCoinController.updateWeightDiscrepancy(12, 12);
//		paymentCoinController.validCoinDetected(coinValidator, coin.getValue());
//		paymentCoinController.validCoinDetected(coinValidator, coin.getValue());
//		BigDecimal expectedPayment = new BigDecimal("0.25");
//		assertTrue(expectedPayment.compareTo(paymentCoinController.getAmount()) == 0); //when comparing expectedamountdue to the amount after inserting coins,the difference should be 0. because cop
//		//since there is a weight discrepancy. you should not be able to pay
//	}
}
